from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from keyboards.keyboard import * 
from states.dispatcher import UserState
from config.config import *
import html, asyncio, aiosqlite

applic_num = 0
router = Router()
sent_messages_1 = {}
sent_messages_2 = {}
sent_messages_3 = {}

@router.message(F.text == '‚ûï –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É')
async def first_step(message: types.Message, state: FSMContext) -> None:
    await state.set_state(UserState.begin_adress)
    await message.answer(f'–£–∫–∞–∂–∏—Ç–µ <b>{html.escape('–ê–î–†–ï–°')}</b> –∏–ª–∏ <b>{html.escape('–ú–ï–°–¢–û')}</b> –æ—Ç–∫—É–¥–∞ –≤–∞—Å –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ</i>', reply_markup=back_keyboard)

@router.message(UserState.begin_adress)
async def second_step(message: types.Message, state: FSMContext) -> None:
    await state.update_data(begin=message.text)
    await state.set_state(UserState.finish_adress)
    await message.answer(f'–£–∫–∞–∂–∏—Ç–µ <b>–ê–î–†–ï–°</b>, <b>–ö–£–î–ê</b> –≤–∞—Å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ–∑—Ç–∏', reply_markup=back_keyboard)

@router.message(UserState.finish_adress)
async def third_step(message: types.Message, state: FSMContext) -> None:
    await state.update_data(finish=message.text)
    await state.set_state(UserState.comment)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è', reply_markup=back_keyboard)

@router.message(UserState.comment)
async def fourth_step(message: types.Message, state: FSMContext) -> None:
    await state.update_data(comment=message.text)
    await state.set_state(UserState.number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=num_keyboard)

@router.message(F.contact)
async def fourth_step_2(message: types.Message, state: FSMContext) -> None:
    await state.update_data(number=message.contact)
    await state.set_state(UserState.locate)
    global number
    number = message.contact.phone_number
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', reply_markup=geo_keyboard)
    
@router.message(F.location)
async def fiveth_step(message: types.Message, state: FSMContext) -> None:
    await state.update_data(locate=message.location)
    data = await state.get_data()
    global latitude
    global longitude
    latitude = message.location.latitude
    longitude = message.location.longitude
    global applic_num
    applic_num += 1
    await message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ {applic_num} –û—Ç–∫—Ä—ã—Ç!\n\n<b>–û—Ç–∫—É–¥–∞:</b> {data['begin']}\n<b>–ö—É–¥–∞:</b> {data['finish']}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω: {number}</b>\n\n<i>–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—é</i>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–∏–Ω—è—Ç–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∞–ø–∏—Å–∞—Ç—å –æ–± –æ—Ç–∫–∞–∑–µ</b>', reply_markup=applic_keyboard)
    

@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ üèÅ')
async def create_applic(message: types.Message, state: FSMContext) -> None:
    from handlers.driver.driver import drive_chat_id, user_id_driver
    global applic_num
    global id_user
    id_user = message.from_user.id
    name_user = message.from_user.full_name
    user_name = message.from_user.username
    if user_name == None:
        link = f'https://t.me/{number}'
    else: 
        link = f'https://t.me/{user_name}'
    data = await state.get_data()
    connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
    cursor = await connect.cursor()
    await cursor.execute('SELECT user_id FROM drivers WHERE isWorking = 1')
    drive_chat_id = await cursor.execute('SELECT user_id FROM drivers WHERE isWorking = 1')
    drivers_ids = await cursor.fetchall()
    for driver_id in drivers_ids:
        try:
            msg_app_1 = await message.bot.send_message(driver_id[0], f"–î–æ—Å—Ç—É–ø–µ–Ω –ó–∞–∫–∞–∑ ‚Ññ {applic_num}!\n\n<b>–ö–ª–∏–µ–Ω—Ç:</b> {name_user}\n\n<b>–û—Ç–∫—É–¥–∞:</b> {data['begin']}\n<b>–ö—É–¥–∞:</b> {data['finish']}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {number}\n\n<a href='{link}'>–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É</a>\n\n<b>–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è</b>: ")
            msg_app_2 = await message.bot.send_location(driver_id[0], latitude=latitude, longitude=longitude)
            msg_app_3 = await message.bot.send_message(driver_id[0], f'<i>–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ ‚Ññ {applic_num} –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>', reply_markup=work_keyboard)
            sent_messages_1[user_id_driver] = {
        'chat_id': drive_chat_id,
        'message_id': msg_app_1.message_id,
    }
            sent_messages_2[user_id_driver] = {
        'chat_id': drive_chat_id,
        'message_id': msg_app_2.message_id,
    }
            sent_messages_3[user_id_driver] = {
        'chat_id': drive_chat_id,
        'message_id': msg_app_3.message_id,
    }
        except Exception as e:
            print(f"Error sending to driver {driver_id}: {e}")
        await asyncio.sleep(0.3)

    await message.answer('<b>–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è!</b>\n\n<i>–í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...</i>', reply_markup=back_keyboard)
    await cursor.close()
    await connect.close()
    await state.clear()

@router.callback_query(F.data == 'work')
async def send_answer(callback: types.CallbackQuery) -> None:
    global id_driver
    id_driver = callback.from_user.id
    global id_chat_driver
    id_chat_driver = callback.message.chat.id
    connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
    cursor = await connect.cursor()
    for chat_id, msg_info in sent_messages_1.items():
        if chat_id != id_driver: 
            try:
                await callback.message.bot.delete_message(msg_info['chat_id'], msg_info['message_id'])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {e}")
    
    for chat_id, msg_info in sent_messages_2.items():
        if chat_id != id_driver: 
            try:
                await callback.message.bot.delete_message(msg_info['chat_id'], msg_info['message_id'])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {e}")
    
    for chat_id, msg_info in sent_messages_3.items():
        if chat_id != id_driver: 
            try:
                await callback.message.bot.delete_message(msg_info['chat_id'], msg_info['message_id'])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {e}")

    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!")
    about_drive = await cursor.execute(f'SELECT full_name, avto_num, phone_num, about FROM drivers WHERE user_id = ?', (id_driver,))
    about_drive = await about_drive.fetchone()
    full_name, avto_num, phone_num, about = about_drive
    user_id_ = callback.message.from_user.id
    await cursor.execute('UPDATE drivers SET isWorking = 0 WHERE user_id = ?', (user_id_,))
    await connect.commit()
    await callback.message.bot.send_message(id_user, f'<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç! –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤ –ø—É—Ç–∏!\n–í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å: </b>\n\n<b>–ò–º—è:</b> {full_name}\n<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: </b>{avto_num}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏: </b>{phone_num}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è: </b>{about}\n<i>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!</i>')
    await callback.message.answer('<i>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø—Ä–∏–µ–¥–µ—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>', reply_markup=i_drive_keyboard)
    await cursor.close()
    await connect.close()


@router.callback_query(F.data == 'idrive')
async def idrive(callback: types.CallbackQuery) -> None:
    await callback.message.answer('–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...')
    await callback.message.bot.send_message(id_user, f'–ï—Å–ª–∏ –≤—ã —Å–µ–ª–∏ –≤ –º–∞—à–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=sit_keyboard)

@router.callback_query(F.data == 'isit')
async def isit(callback: types.CallbackQuery) -> None:
    await callback.message.bot.send_message(id_user, f'<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=stop_app_us_keyboard)


@router.message(F.text == '‚úÖ –ü—Ä–∏–±—ã–ª')
async def finish_drive(message: types.Message):
    user_id = message.from_user.id
    connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
    cursor = await connect.cursor()
    finish_app_num = await cursor.execute('SELECT finish_applic FROM clients WHERE user_id = ?', (user_id,))
    finish_app_num = await finish_app_num.fetchone()
    finish_app_num = finish_app_num[0] + 1
    await cursor.execute('UPDATE clients SET finish_applic = ? WHERE user_id = ?', (finish_app_num, user_id))
    await connect.commit()
    await cursor.close()
    await connect.close()
    await message.bot.send_message(id_user, f'<i>–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º</i>')
    await message.bot.send_message(id_driver, f'–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–±—ã–ª–∏ –≤ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑</b>', reply_markup=stop_app_keyboard)

@router.callback_query(F.data == 'finish_app')
async def pay_app(callback: types.CallbackQuery) -> None:
    user_id = callback.message.from_user.id
    connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
    cursor = await connect.cursor()
    money_driver = await cursor.execute('SELECT money FROM drivers WHERE user_id = ?', (id_driver,))
    money_driver = await money_driver.fetchone()
    money_driver = money_driver[0] - COMISSION
    await cursor.execute('UPDATE drivers SET money = ? WHERE user_id = ?', (money_driver, id_driver,))
    await connect.commit()
    await cursor.close()
    await connect.close()
    await callback.message.answer('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å–Ω—è—Ç—ã 40 —Ä—É–±–ª–µ–π...', reply_markup=driver_keyboard)
    await callback.message.bot.send_message(id_user, f'<i>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</i>\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=back_keyboard)
    
