from aiogram import types, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from yoomoney import Quickpay, Client
from states.dispatcher import DriverState
from keyboards.keyboard import * 
from database.db import add_user
from config.config import *
import html, aiosqlite

router = Router()
client = Client(YOO_TOKEN)

@router.message(F.text == 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def main_cabinet(message: types.Message) -> None:
    user_id = message.from_user.id
    connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
    cursor = await connect.cursor()
    global check_user
    check_user = await cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (user_id,))
    check_user = await check_user.fetchone()
    if check_user is None:
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!</b>\n\n<b>–°—Ç–∞—Ç—É—Å: </b>üöò–ö–ª–∏–µ–Ω—Çüöò\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫: </b>\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: </b>\n')
        await connect.commit()
    else:
        summa = await cursor.execute('SELECT money FROM drivers WHERE user_id = ?', (user_id,))
        summa = await summa.fetchone()
        await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!</b>\n\n<b>–°—Ç–∞—Ç—É—Å: </b>üöñ–í–æ–¥–∏—Ç–µ–ª—åüöñ\n<b>–°—É–º–º–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {summa[0]} —Ä—É–±–ª–µ–π</b>\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫: </b>\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: </b>\n', reply_markup=cabinet_keyboard)
    await cursor.close()
    await connect.close()

@router.callback_query(F.data == 'pay')
async def pay_cabinet(callback: types.CallbackQuery) -> None:
    label = callback.from_user.id
    quickpay = Quickpay(
            receiver="4100118970052190", # –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            quickpay_form="shop", # –≠—Ç–æ —è —Ö–∑ –∑–∞—á–µ–º, –Ω–æ —è —ç—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞—é
            targets="Pay cabinet", # –¶–µ–ª–∏, —è –∏—Ö –Ω–µ –∏–∑–º–µ–Ω—è—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Å–æ–±–æ–π –Ω—É–∂–¥—ã –≤ —ç—Ç–æ–º –Ω–µ—Ç.
            paymentType="SB", # –≠—Ç–æ –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
            sum=400, # –≠—Ç–æ —Å—É–º–º–∞
            label=label # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—Ç—ã
            )
    link_for_pay = quickpay.base_url
    await callback.message.answer(f'–í–Ω–∏–º–∞–Ω–∏–µ!\n\n<b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:</b> 400 —Ä–æ—Å. —Ä—É–±–ª–µ–π.\n\n–ü–û–°–õ–ï –í–ù–ï–°–ï–ù–ò–Ø –û–ü–õ–ê–¢–´ –î–ï–ù–¨–ì–ò –í–´–í–ï–°–¢–ò –û–ë–†–ê–¢–ù–û –ù–ï–õ–¨–ó–Ø\n\n<i>–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n<a href="{link_for_pay}">–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</a>\n\n–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>üí≥ –û–ø–ª–∞—Ç–∏–ª</b>', reply_markup=check_pay_keyboard)

@router.callback_query(F.data == 'check_pay')
async def pay_check(callback: types.CallbackQuery) -> None:
    label = callback.from_user.id
    history = client.operation_history(label=label)
    if history.operations == []:
        await callback.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')

    for operation in history.operations:
        if operation.status == 'success':
            await callback.answer('–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –í–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 400 —Ä–æ—Å. —Ä—É–±–ª–µ–π!')
            connect = await aiosqlite.connect(r'C:\PYTHONP\NubiraTaxi\database\database.db')
            cursor = await connect.cursor()
            summa_driver = await cursor.execute('SELECT money FROM drivers WHERE user_id = ?', (label,))
            summa_driver = await summa_driver.fetchone()
            summa_driver = summa_driver[0] + 400
            await cursor.execute('UPDATE driver SET money = ? WHERE user_id = ?', (summa_driver, label,))
            await connect.commit()
            await cursor.close()
            await connect.close()


    
            
            
 